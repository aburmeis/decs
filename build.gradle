buildscript {
    repositories {
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.3.1"
}

apply plugin: 'propdeps'
apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'

ext {
    slf4jVersion = '1.7.12'
    findbugsVersion = '3.0.0'
    branch = getBranch()
    buildType = getBuildType(branch)
    if (!project.hasProperty('bintrayUser')) {
        bintrayUser = System.getProperty("user.name")
    }
    if (!project.hasProperty('bintrayKey')) {
        bintrayKey = ''
    }
}

sourceCompatibility = 1.8
version = "${majorVersion}.${minorVersion}.${patchVersion}-${buildType}"
jacoco.toolVersion = '0.7.4.201502262128'

repositories {
    jcenter()
}

dependencies {
    compile "com.google.code.findbugs:annotations:${findbugsVersion}"

    optional "org.slf4j:slf4j-api:${slf4jVersion}"

    testCompile 'junit:junit:4.12',
        'com.tngtech.java:junit-dataprovider:1.10.1',
        'org.hamcrest:hamcrest-all:1.3',
        'org.mockito:mockito-all:1.10.19'

    testRuntime "org.slf4j:slf4j-simple:${slf4jVersion}"
}

test {
    exclude '**/*Performance*'
}

task performance(type: Test) {
    include '**/*Performance*'
    reports {
        html.enabled = true
        html.destination = file('build/reports/performance')
    }
}

javadoc {
    options.memberLevel = 'PROTECTED'
    options.author = false
    options.header = project.name
    options.links(["http://docs.oracle.com/javase/8/docs/api/"] as String[])
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.withType(Jar) {
    manifest {
        attributes(
            "Specification-Title": project.description,
            "Specification-Version": "${majorVersion}.${minorVersion}",
            "Specification-Vendor": vendor,
            "Implementation-Title": project.name,
            "Implementation-Version": "${majorVersion}.${minorVersion}.${patchVersion}",
            "Implementation-Vendor": vendor,
            "Implementation-Vendor-Id": project.group
        )
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

findbugs {
    sourceSets = [sourceSets.main]
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = "javadoc"
    from javadoc
}

task downloadTestData {
    ext.localCopy = file('src/test/resources/worldcitiespop.txt')
    ext.tempFile = file('build/resources/worldcitiespop.txt.gz')
    outputs.file localCopy
    doLast {
        ant {
            get(
                    src: "http://www.maxmind.com/download/worldcities/worldcitiespop.txt.gz",
                    dest: tempFile,
            )
        }
        localCopy.withOutputStream { os ->
            os << resources.gzip(tempFile).read()
        }
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

bintray {
    user = bintrayUser
    key = bintrayKey
    pkg {
        repo = 'maven'
        name = project.name
        desc = project.description
        version {
            name = project.version
            vcsTag = "v${majorVersion}.${minorVersion}.${patchVersion}"
        }
    }
    publications = ['mavenJava']
}

build.dependsOn javadoc, jacocoTestReport
performance.dependsOn downloadTestData

def getBranch() {
    return "git rev-parse --abbrev-ref HEAD".execute().text.trim()
}

def getBuildType(branch) {
    switch (branch) {
        case ~/(master|version.*)/:
            return 'RELEASE'
        default:
            return 'SNAPSHOT'
    }
}

