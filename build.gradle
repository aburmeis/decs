plugins {
    id 'com.jfrog.bintray' version '1.7.3'
    id 'nebula.optional-base' version '3.3.0'
    id 'java'
    id 'findbugs'
    id 'jacoco'
    id 'maven-publish'
}

ext {
    slf4jVersion = '1.7.25'
    findbugsVersion = '3.0.1'
    branch = getBranch()
    versionSuffix = getVersionSuffix(branch)
    if (!project.hasProperty('bintrayUser')) {
        bintrayUser = System.getProperty("user.name")
    }
    if (!project.hasProperty('bintrayKey')) {
        bintrayKey = ''
    }
}

sourceCompatibility = 1.8
version = "${majorVersion}.${minorVersion}.${patchVersion}${versionSuffix}"

repositories {
    jcenter()
}

dependencies {
    compileOnly "com.google.code.findbugs:annotations:${findbugsVersion}"

    compile "org.slf4j:slf4j-api:${slf4jVersion}", optional

    testCompile 'junit:junit:4.12',
        'com.tngtech.java:junit-dataprovider:1.12.0',
        'org.hamcrest:hamcrest-library:1.3',
        'org.mockito:mockito-core:1.10.19'

    testRuntime "org.slf4j:slf4j-simple:${slf4jVersion}"
}

test {
    exclude '**/*Performance*'
}

task performance(type: Test) {
    include '**/*Performance*'
    reports {
        html.enabled = true
        html.destination = file('build/reports/performance')
    }
}

javadoc {
    options.memberLevel = 'PROTECTED'
    options.author = false
    options.header = project.name
    options.links(["http://docs.oracle.com/javase/8/docs/api/"] as String[])
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

tasks.withType(Jar) {
    manifest {
        attributes(
            "Automatic-Module-Name": "diergo.decs",
            "Specification-Title": project.description,
            "Specification-Version": "${majorVersion}.${minorVersion}",
            "Specification-Vendor": vendor,
            "Implementation-Title": project.name,
            "Implementation-Version": "${majorVersion}.${minorVersion}.${patchVersion}",
            "Implementation-Vendor": vendor,
            "Implementation-Vendor-Id": project.group
        )
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

jacoco {
    toolVersion = '0.8.0'
    //sourceSets = [sourceSets.main]
}

findbugs {
    toolVersion = findbugsVersion
    //sourceSets = [sourceSets.main]
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = "javadoc"
    from javadoc
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'CLASS'
                minimum = 0.9
            }
            limit {
                counter = 'LINE'
                minimum = 0.9
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.8
            }
        }
    }
}

task downloadTestData {
    ext.localCopy = file('src/test/resources/worldcitiespop.txt')
    ext.tempFile = file('build/resources/worldcitiespop.txt.gz')
    outputs.file localCopy
    doLast {
        ant {
            get(
                    src: "http://www.maxmind.com/download/worldcities/worldcitiespop.txt.gz",
                    dest: tempFile,
            )
        }
        localCopy.withOutputStream { os ->
            os << resources.gzip(tempFile).read()
        }
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

bintray {
    user = bintrayUser
    key = bintrayKey
    pkg {
        repo = 'maven'
        name = project.name
        desc = project.description
        version {
            name = project.version
            vcsTag = "v${majorVersion}.${minorVersion}.${patchVersion}"
        }
    }
    publications = ['mavenJava']
}

check.dependsOn jacocoTestCoverageVerification, jacocoTestReport
build.dependsOn javadoc
performance.dependsOn downloadTestData

task wrapper(type: Wrapper) {
    gradleVersion = '4.5.1'
}

def getBranch() {
    return "git rev-parse --abbrev-ref HEAD".execute().text.trim()
}

def getVersionSuffix(branch) {
    switch (branch) {
        case ~/(master|version.*)/:
            return ''
        default:
            return '-SNAPSHOT'
    }
}

